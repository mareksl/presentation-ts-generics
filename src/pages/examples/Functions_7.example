const email = {
  subject: "Re: Investment",
  content: "Good Morning Everyone! üêµ",
};

const attachments = {
  files: ["Statement.pdf", "moon.jpg"],
  size: 2048,
};

type AnyObject = Record<string, unknown>;

function betterAttach<T extends object, U extends AnyObject>(
  obj1: T,
  obj2: U
): T & U {
  return { ...obj1, ...obj2 };
}

const betterEmail = betterAttach(email, attachments);
console.log(betterEmail);

const wrongEmail = betterAttach("Hello", attachments);
const wrongEmail_1 = betterAttach(email, 5);

// =======================================

function add<T extends string | number, U extends string | number>(
  num1: T,
  num2: U
): number {
  const parsedNum1 = typeof num1 === "number" ? num1 : parseFloat(num1);
  const parsedNum2 = typeof num2 === "number" ? num2 : parseFloat(num2);

  return parsedNum1 + parsedNum2;
}

const sum = add(1, "3");
// console.log(sum)

// =======================================

interface Lengthwise {
  length: number;
}

function getLength<T extends Lengthwise>(arg: T) {
  return arg.length;
}

const arrayLength = getLength([1, 2, 3]);
const stringLength = getLength("some string");

const wrongLength = getLength({ some: "object" });
const wrongLength1 = getLength({ some: "object", length: "looong" });

const objectLength = getLength({ some: "object", length: 123 });
// console.log(objectLength)

// =======================================

export default undefined;
